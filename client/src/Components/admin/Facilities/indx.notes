  const handleImageChange = (e) => {
    if (e.target.files && e.target.files.length > 0) {
      const selectedFile = e.target.files[0]
      setFacilities({ ...facility, file: selectedFile, previewImage: URL.createObjectURL(selectedFile) })
    }
  }

  const removeSelectedImage = () => {
    if (facility.file) {
      setFacilities({ ...facility, file: null, previewImage: null })
    } else if (facility.existingImage) {
      setFacilities({ ...facility, existingImage: null, previewImage: null })
    }
  }

  const handleClick = async (e) => {
    e.preventDefault()
    const imgUrl = facility.file ? await upload(facility.file) : facility.existingImage;


    try {
      state
        ?
        await axios.patch(`/api/facilities/${state.Fac_Id}`, {
          fac_title: facility.fac_title,
          fac_desc: facility.fac_desc,
          fac_img: facility.file ? imgUrl : facility.existingImage,
        })
        : await axios.post(`/api/facilities/`, {
          fac_title: facility.fac_title,
          fac_desc: facility.fac_desc,
          fac_img: facility.file ? imgUrl : "",

        })

      navigate('/dashboard/facilities')
    } catch (err) {
      console.log(err, "cannot post")
    }
  }




  return (
    <>
      <div className='add'>
        <div className="content">
          <span><Link to='/dashboard/facilities/'>Back</Link></span>
          <TextInput
            type='text'
            label='Title'
            value={facility.fac_title}
            onChange={(e) => setFacilities({ ...facility, fac_title: e.target.value })}
          />

          <TextArea
            rows={10}
            cols={100}
            value={facility.fac_desc}
            onChange={(e) => setFacilities({ ...facility, fac_desc: e.target.value })}
            label="Description"
          />

        </div>
        <div className="menu">
          <div className='item'>
            <h1>Publish</h1>
          </div>
          <ImageUploader
            multiple={true}
            file={facility.file}
            existingImage={facility.existingImage}
            previewImage={facility.previewImage}
            removeSelectedImage={removeSelectedImage}
            handleImageChange={handleImageChange}
          />
          <ImageGalleryUploader />
          <div className="buttons">
            <button onClick={handleClick}>Publish</button>
            <button>Save as a Draft</button>
          </div>
        </div>
      </div>
    </>
  )
}



  // const handleClick = async (e) => {
  //   e.preventDefault();
  //   let featuredImgUrl = facility.existingImage || ""; // Initialize featuredImgUrl
  //   let galleryImgUrls = [];
  
  //   try {
  //     if (facility.file) {
  //       featuredImgUrl = await upload(facility.file);
  //     }
  
  //     if (facility.galleryImages.length > 0) {
  //       const uploadPromises = facility.galleryImages.map(async (image) => {
  //         const imgUrl = await upload(image.file);
  //         return imgUrl;
  //       });
  //       galleryImgUrls = await Promise.all(uploadPromises);
  //     }
  
  //     if (state) {
  //       await axios.patch(`/api/facilities/${state.Fac_Id}`, {
  //         fac_title: facility.fac_title,
  //         fac_desc: facility.fac_desc,
  //         fac_img: featuredImgUrl,
  //         gallery_imgs: galleryImgUrls,
  //       });
  //     } else {
  //       await axios.post(`/api/facilities/`, {
  //         fac_title: facility.fac_title,
  //         fac_desc: facility.fac_desc,
  //         fac_date: moment(Date.now()).format('YYYY-MM-DD'),
  //         fac_img: featuredImgUrl,
  //         gallery_imgs: galleryImgUrls,
  //       });
  //     }
  
  //     navigate('/dashboard/facilities');
  //   } catch (err) {
  //     console.log(err, "cannot post");
  //   }
  // };
  





import React, { useEffect, useState } from 'react'
import { Link, useLocation, useNavigate } from 'react-router-dom'
import TextInput from '../../forms/FormFields/TextInput'
import ReactQuill from 'react-quill'
import placeholder from '../../../img/placeholder-image.webp'
import TextArea from '../../forms/FormFields/TextArea'
import { upload } from '../../../Hooks/imageHandling'
import ImageUploader from '../../util/ImageUploader'
import axios from 'axios'
import ImageGalleryUploader from '../../util/ImageGalleryUploader'
import moment from 'moment'


const Add_Facility = () => {

  const state = useLocation().state
  const [facility, setFacilities] = useState({
    fac_title: state?.Fac_Title || "",
    fac_desc: state?.Fac_Desc || "",
    file: null,
    featuredImg: state?.Featured_Image || null,
    previewFeaturedImage: null,
    galleryImages: state?.Gallery_Images || [],
    galleryImagePreviews: []
  })
  const navigate = useNavigate();

  const handleImageChange = (e) => {
    if (e.target.files && e.target.files.length > 0) {
      const selectedFile = e.target.files[0];
      setFacilities((prevFacilities) => ({
        ...prevFacilities,
        file: selectedFile,
        previewFeaturedImage: URL.createObjectURL(selectedFile)
      }));
    }
  };


  const handleGalleryImageChange = (e) => {
    if (e.target.files && e.target.files.length > 0) {
      const selectedImages = Array.from(e.target.files);
      const newGalleryImages = selectedImages.map((selectedImage) => ({
        file: selectedImage,
        preview: URL.createObjectURL(selectedImage),
      }));
  
      setFacilities((prevFacilities) => ({
        ...prevFacilities,
        galleryImages: [...prevFacilities.galleryImages, ...newGalleryImages],
        galleryImagePreviews: [...prevFacilities.galleryImagePreviews, ...newGalleryImages.map((image) => image.preview)],
      }));
    }
  };
  
  
  // const handleGalleryImageChange = (e) => {
  //   if (e.target.files && e.target.files.length > 0) {
  //     const selectedImages = Array.from(e.target.files);
  //     const updatedGalleryImages = selectedImages.map((selectedImage) => ({
  //       file: selectedImage,
  //       preview: URL.createObjectURL(selectedImage),
  //     }));
  //     // Merge existing and new gallery images
  //     const allGalleryImages = [...facility.galleryImages, ...updatedGalleryImages];
  //     setFacilities((prevFacilities) => ({
  //       ...prevFacilities,
  //       galleryImages: allGalleryImages,
  //       galleryImagePreviews: allGalleryImages.map((image) => image.preview),
  //     }));
  //   }
  // };

  const removeFeaturedImage = () => {
    setFacilities((prevFacilities) => ({
      ...prevFacilities, featuredImg: null,
      previewFeaturedImage: null
    }))
  }

  const removeGalleryImage = (index) => {
    if (facility.galleryImages.length > 0) {
      const updatedGalleryImages = [...facility.galleryImages];
      updatedGalleryImages.splice(index, 1)
      setFacilities((prevFacilities) => ({
        ...prevFacilities,
        galleryImages: updatedGalleryImages,
        galleryImagePreviews: updatedGalleryImages.map((image) => image.preview)
      }))
    }
  }

  // const removeSelectedImage = (index) => {
  //   if (index === -1) {
  //     setFacilities((prevFacilities) => ({
  //       ...prevFacilities,
  //       featuredImg: null,
  //       previewFeaturedImage: null
  //     }));
  //   } else if (facility.galleryImages.length > 0) {
  //     const updatedGalleryImages = [...facility.galleryImages];
  //     updatedGalleryImages.splice(index, 1);
  //     setFacilities((prevFacilities) => ({
  //       ...prevFacilities,
  //       galleryImages: updatedGalleryImages,
  //       galleryImagePreviews: updatedGalleryImages.map((image) => image.preview)
  //     }));
  //   }
  // };

  const handleClick = async (e) => {
    e.preventDefault();
    const featuredImgUrl = facility.file ? await upload(facility.file) : facility.featuredImg;
    const updatedGalleryImages = facility.galleryImages.filter((image) => image.file || image.url);

  // Upload the new gallery images if they exist
  const galleryUrls = await Promise.all(
    updatedGalleryImages.map(async (image) =>
      image.file ? await upload(image.file) : image.url
    )
  );

  
    try {
      state
        ? await axios.patch(`/api/facilities/${state.Fac_Id}`, {
            fac_title: facility.fac_title,
            fac_desc: facility.fac_desc,
            featured_img: facility.file ? featuredImgUrl : facility.featuredImg,
            gallery_imgs: updatedGalleryImages ? galleryUrls : facility.galleryImages,
          })
        : await axios.post(`/api/facilities/`, {
            fac_title: facility.fac_title,
            fac_desc: facility.fac_desc,
            fac_date: moment(Date.now()).format('YYYY-MM-DD'),
            featured_img: facility.file ? featuredImgUrl : "",
            gallery_imgs: updatedGalleryImages ? galleryUrls : [],
          });
  
      console.log("Existing Gallery Images:", facility.galleryImages);
      navigate('/dashboard/facilities');
    } catch (err) {
      console.log(err, "cannot post");
    }
  };

  // const handleClick = async (e) => {
  //   e.preventDefault();

  //   const featuredImgUrl = facility.file ? await upload(facility.file) : facility.featuredImg;

  //   // Create an array to store gallery URLs
  //   const galleryUrls = [];

  //   try {


  //     if (state) {
  //       // When updating, filter out gallery images that have been removed
  //       const removedImages = facility.galleryImages
  //         .filter((image) => image.file === null) // Check if the file is missing
  //         .map((image) => image.url);

  //       await axios.patch(`/api/facilities/${state.Fac_Id}`, {
  //         fac_title: facility.fac_title,
  //         fac_desc: facility.fac_desc,
  //         featured_img: facility.file ? featuredImgUrl : facility.featuredImg,
  //         gallery_imgs: galleryUrls.filter((url) => !removedImages.includes(url)), // Filter out removed images
  //       });
  //     } else {
  //       await axios.post(`/api/facilities/`, {
  //         fac_title: facility.fac_title,
  //         fac_desc: facility.fac_desc,
  //         fac_date: moment(Date.now()).format('YYYY-MM-DD'),
  //         featured_img: facility.file ? featuredImgUrl : "",
  //         gallery_imgs: galleryUrls,
  //       });

  //       console.log("Existing Gallery Images:", facility.galleryImages);
  //       navigate('/dashboard/facilities');
  //     }
  //   } catch (err) {
  //     console.log(err, "cannot post");
  //   }
  // };

  return (
    <>
      <div className='add'>
        <div className="content">
          <span><Link to='/dashboard/facilities/'>Back</Link></span>
          <TextInput
            type='text'
            label='Title'
            value={facility.fac_title}
            onChange={(e) => setFacilities({ ...facility, fac_title: e.target.value })}
          />

          <TextArea
            rows={10}
            cols={100}
            value={facility.fac_desc}
            onChange={(e) => setFacilities({ ...facility, fac_desc: e.target.value })}
            label="Description"
          />

        </div>
        <div className="menu">
          <div className='item'>
            <h1>Publish</h1>
          </div>
          <ImageUploader
            file={facility.file}
            existingImage={facility.featuredImg}
            previewImage={facility.previewFeaturedImage}
            removeSelectedImage={removeFeaturedImage}
            handleImageChange={handleImageChange}
          />


          <ImageGalleryUploader
            // file={facility.file}
            galleryImages={facility.galleryImages}
            handleGalleryImageChange={handleGalleryImageChange}
            removeImageItem={removeGalleryImage}
          />

          <div className="buttons">
            <button onClick={handleClick}>Publish</button>
            <button>Save as a Draft</button>
          </div>
        </div>
      </div>
    </>
  )
}
export default Add_Facility